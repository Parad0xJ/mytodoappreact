{"version":3,"sources":["Footer.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Component","ROUTES","taches","tachesCompletes","tachesIncompletes","App","state","tasks","id","content","completed","taskAdd","currentRoute","_this2","this","window","location","hash","onhashchange","setState","filter","elt","App_TaskList","toutesLesTaches","onDelete","handleDelete","bind","changeColor","handleColor","title","App_NotFound","clickedElt","newState","item","e","target","value","preventDefault","newTask","length","allTasks","concat","newStatus","style","backgroundColor","href","renderRoute","onSubmit","handleSubmit","type","onChange","handleChange","placeholder","required","Footer_Footer","TaskList","props","clickHandler","clickColorChange","map","i","App_Task","key","handleClick","clickColor","Task","onClick","data-toggle","data-placement","NotFound","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b65ee64a.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\n\r\nexport default class Footer extends Component{\r\n  render(){\r\n  return(\r\n<div className=\"jumbotron py-2\">\r\n<p><strong>LC React App Todo</strong></p>\r\n<p className=\"lead\">My second application with React. </p>\r\n<p className=\"lead\">I have used : React.js - Bootstrap 4 - </p>\r\n<div className=\"text-muted\">©Laurent CAMINADE - Juillet 2019 -</div>\r\n</div>\r\n)}\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Footer from './Footer'\nimport './App.css';\n\nconst ROUTES = {\n  taches: '#/',\n  tachesCompletes: '#/Taches-completes',\n  tachesIncompletes: '#/Taches-incompletes'\n}\n\nexport default class App extends Component {\n\n  state = { tasks: [{ id: 1, content: 'Nager', completed: false }, { id: 2, content: 'Massage', completed: false }, { id: 3, content: 'Courses', completed: true }], taskAdd: '', currentRoute: ROUTES.taches }\n\n  componentDidMount() {\n    window.location.hash = ROUTES.taches;\n    window.onhashchange = () => {\n\n      this.setState({ currentRoute: window.location.hash })\n    }\n  }\n  toutesLesTaches() {\n    return this.state.tasks\n  }\n  tachesCompletes() {\n    return this.state.tasks.filter(elt => elt.completed === true)\n  }\n  tachesIncompletes() {\n    return this.state.tasks.filter(elt => elt.completed === false)\n  }\n  renderRoute() {\n    switch (this.state.currentRoute) {\n      case ROUTES.taches: return <TaskList tasks={this.toutesLesTaches()} onDelete={this.handleDelete.bind(this)} changeColor={this.handleColor.bind(this)} title='Toutes les taches' />;\n      case ROUTES.tachesCompletes: return <TaskList tasks={this.tachesCompletes()} onDelete={this.handleDelete.bind(this)} changeColor={this.handleColor.bind(this)} title='Taches Complétées' />;\n      case ROUTES.tachesIncompletes: return <TaskList tasks={this.tachesIncompletes()} onDelete={this.handleDelete.bind(this)} changeColor={this.handleColor.bind(this)} title='Taches Incomplétes' />;\n      default: return <NotFound />\n    }\n  }\n  handleDelete(elt) {\n    const clickedElt = elt.id\n    const newState = this.state.tasks.filter(item => item.id !== clickedElt)\n\n    this.setState({ tasks: newState })\n  }\n\n  handleChange(e) {\n    this.setState({ taskAdd: e.target.value })\n  }\n  handleSubmit(e) {\n    e.preventDefault()\n\n    const newTask = {\n      id: this.state.tasks.length + 1,\n      content: this.state.taskAdd,\n      completed: false\n    }\n\n    const allTasks = this.state.tasks.concat(newTask)\n\n    this.setState({ tasks: allTasks, taskAdd: '' })\n\n  }\n  handleColor(elt) {\n    const newStatus = elt.completed === true ? elt.completed = false : elt.completed = true\n    this.setState({ completed: newStatus })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <nav className=\"navbar navbar-light\" style={{ backgroundColor: '#a7d2f2' }}>\n          <span className=\"navbar-text h5\">\n            <ul className='list-group list-group-horizontal'>\n              <li className='list-group-item'>\n                <a href={ROUTES.taches} className='text-info'>Toutes les taches</a></li>\n              <li className='list-group-item'>\n                <a href={ROUTES.tachesCompletes} className='text-info' >Taches complétées</a>\n              </li>\n              <li className='list-group-item'>\n                <a href={ROUTES.tachesIncompletes} className='text-info'>Taches incomplétes</a>\n              </li>\n            </ul>\n          </span>\n                </nav>\n        <div className=\"container\">\n          {this.renderRoute()}\n          <form className=\"form-row justify-content-center mt-2\" onSubmit={this.handleSubmit.bind(this)}>\n            <div className=\"col-auto\">\n              <div className=\"input-group mb-2\">\n                <div className=\"input-group-prepend\">\n                  <div className=\"input-group-text\"><i className=\"fas fa-list\"></i></div>\n                </div>\n                <input type=\"text\" className=\"form-control\" value={this.state.taskAdd} onChange={this.handleChange.bind(this)} placeholder=\"Nouvelle Tache\" required/>\n              </div>\n            </div>\n            <div className=\"col-auto\">\n              <button type=\"submit\" className=\"btn btn-outline-info mb-2\">Ajouter Tache</button>\n            </div>\n          </form>\n                </div>\n        <Footer />\n      </div>\n    );\n  }\n\n}\n\nconst TaskList = props => {\n  const clickHandler = elt => {\n    props.onDelete(elt)\n  }\n  const clickColorChange = elt => {\n    props.changeColor(elt)\n  }\n  return (\n    <ul className='list-group mt-3'>\n      <h3 className='text-monospace font-italic text-primary my-3'>{props.title}</h3>\n      {props.tasks.map((elt, i) => <Task key={i} elt={elt} handleClick={clickHandler.bind(this, elt)} clickColor={clickColorChange.bind(this, elt)} />)}\n    </ul>\n  )\n}\nconst Task = props => (\n  props.elt.completed ? <li className='list-group-item w-50 mx-auto list-group-item-secondary my-1 border-danger'><i className=\"far fa-calendar-check cb fa-pull-left\" onClick={props.clickColor} data-toggle=\"tooltip\" data-placement=\"left\" title=\"Change status\"></i><s>{props.elt.content}</s><i className=\"far fa-times-circle cc fa-pull-right\" onClick={props.handleClick} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete item\"></i></li> :\n    <li className='list-group-item w-50 mx-auto list-group-item-info my-1 border-success'><i className=\"far fa-calendar cr fa-pull-left\" onClick={props.clickColor} data-toggle=\"tooltip\" data-placement=\"left\" title=\"Change status\"></i>{props.elt.content}<i className=\"far fa-times-circle cc fa-pull-right\" onClick={props.handleClick} data-toggle=\"tooltip\" data-placement=\"right\" title=\"Delete item\"></i></li>\n)\n\nconst NotFound = props => {\n  return <h2>La page que vous demandez, n'existe pas Désolé !!!</h2>\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}